local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Silent Aim | Mobile & PC",
   Icon = 0,
   LoadingTitle = "Aimbot Interface Suite",
   LoadingSubtitle = "by madison.dev.",
   ShowText = "Silent-Aim",
   Theme = "Serenity",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Anti-Cheat"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

--// Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local config = {
    SilentAimEnabled = false,
    AutoShootEnabled = false,
    TriggerbotEnabled = false,
    AimBone = "Head",
    PredictionMode = "Linear",
    HitChance = 100,
    FOVRadius = 100,
    SmoothFactor = 0.3,
    WhitelistEnabled = false,
    WhitelistUserIds = {},
    BlacklistEnabled = false,
    BlacklistUserIds = {},
    CustomCrosshairEnabled = true,
    CrosshairStyle = "Plus",
    CrosshairColor = Color3.fromRGB(200, 50, 50),
    FOVColor = Color3.fromRGB(200, 50, 50),
}

local function isWhitelisted(player)
    if not config.WhitelistEnabled then return true end
    return table.find(config.WhitelistUserIds, player.UserId) ~= nil
end
local function isBlacklisted(player)
    if not config.BlacklistEnabled then return false end
    return table.find(config.BlacklistUserIds, player.UserId) ~= nil
end
local function GetValidPlayers()
    local list = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            if isWhitelisted(player) and not isBlacklisted(player) then
                table.insert(list, player)
            end
        end
    end
    return list
end
local function PredictPosition(part, mode)
    local velocity = part.Velocity
    local position = part.Position
    local ping = 0.15
    if mode == "None" then
        return position
    elseif mode == "Linear" then
        return position + velocity * ping
    elseif mode == "Exponential" then
        return position + velocity * ping + velocity * velocity.Magnitude * 0.001
    end
    return position
end
local function UniversalShoot()
    UserInputService:SendMouseButtonEvent(Mouse.X, Mouse.Y, Enum.UserInputState.Begin, true)
    UserInputService:SendMouseButtonEvent(Mouse.X, Mouse.Y, Enum.UserInputState.End, true)
    if UserInputService.TouchEnabled then
        local vu = game:GetService("VirtualUser")
        vu:CaptureController()
        vu:ClickButton1(Vector2.new(Mouse.X, Mouse.Y))
    end
end

-- Drawing
local crosshairLines, FOVCircle = {}, Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Color = config.FOVColor
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Radius = config.FOVRadius
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
local function DrawCrosshair()
    if #crosshairLines == 0 then
        for i = 1, 4 do
            local line = Drawing.new("Line")
            line.Color = config.CrosshairColor
            line.Thickness = 2
            line.Visible = true
            table.insert(crosshairLines, line)
        end
    end
    local centerX = Camera.ViewportSize.X / 2
    local centerY = Camera.ViewportSize.Y / 2
    local size = 10
    if config.CrosshairStyle == "Plus" then
        crosshairLines[1].From = Vector2.new(centerX - size, centerY)
        crosshairLines[1].To = Vector2.new(centerX + size, centerY)
        crosshairLines[2].From = Vector2.new(centerX, centerY - size)
        crosshairLines[2].To = Vector2.new(centerX, centerY + size)
        for i = 3, 4 do crosshairLines[i].Visible = false end
    elseif config.CrosshairStyle == "Circle" then
        for i = 1, 4 do crosshairLines[i].Visible = false end
    end
end
local function ClearCrosshair()
    for _, line in ipairs(crosshairLines) do
        line.Visible = false
        line:Remove()
    end
    crosshairLines = {}
end

local function GetClosestTarget()
    local closestTarget = nil
    local closestDistance = config.FOVRadius
    local mousePos = Vector2.new(Mouse.X, Mouse.Y)
    local playersList = GetValidPlayers()
    for _, player in ipairs(playersList) do
        local char = player.Character
        if char then
            local part = char:FindFirstChild(config.AimBone)
            if part then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local pos2d = Vector2.new(screenPos.X, screenPos.Y)
                    local dist = (pos2d - mousePos).Magnitude
                    if dist <= closestDistance then
                        closestDistance = dist
                        closestTarget = player
                    end
                end
            end
        end
    end
    return closestTarget
end

-- Rayfield Tabs & Controls
local TabAimbot = Window:CreateTab("Aimbot", 4483362458)
local TabVisuals = Window:CreateTab("Visuals", 4483362458)

TabAimbot:CreateToggle({
    Name = "Silent Aim",
    CurrentValue = config.SilentAimEnabled,
    Flag = "SilentAimEnabled",
    Callback = function(v) config.SilentAimEnabled = v end
})
TabAimbot:CreateToggle({
    Name = "Auto Shoot",
    CurrentValue = config.AutoShootEnabled,
    Flag = "AutoShootEnabled",
    Callback = function(v) config.AutoShootEnabled = v end
})
TabAimbot:CreateToggle({
    Name = "Triggerbot",
    CurrentValue = config.TriggerbotEnabled,
    Flag = "TriggerbotEnabled",
    Callback = function(v) config.TriggerbotEnabled = v end
})
TabAimbot:CreateDropdown({
    Name = "Aim Bone",
    Options = {"Head", "UpperTorso", "HumanoidRootPart"},
    CurrentOption = config.AimBone,
    Flag = "AimBone",
    Callback = function(v) config.AimBone = v[1] end
})
TabAimbot:CreateDropdown({
    Name = "Prediction",
    Options = {"None", "Linear", "Exponential"},
    CurrentOption = config.PredictionMode,
    Flag = "PredictionMode",
    Callback = function(v) config.PredictionMode = v[1] end
})
TabAimbot:CreateSlider({
    Name = "Hit Chance",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = config.HitChance,
    Flag = "HitChance",
    Callback = function(v) config.HitChance = v end
})
TabAimbot:CreateSlider({
    Name = "FOV Radius",
    Range = {20, 400},
    Increment = 1,
    CurrentValue = config.FOVRadius,
    Flag = "FOVRadius",
    Callback = function(v) config.FOVRadius = v; FOVCircle.Radius = v end
})
TabAimbot:CreateSlider({
    Name = "Smooth",
    Range = {0.01, 1},
    Increment = 0.01,
    CurrentValue = config.SmoothFactor,
    Flag = "SmoothFactor",
    Callback = function(v) config.SmoothFactor = v end
})

TabVisuals:CreateDropdown({
    Name = "Crosshair Style",
    Options = {"Plus", "Circle"},
    CurrentOption = config.CrosshairStyle,
    Flag = "CrosshairStyle",
    Callback = function(v) config.CrosshairStyle = v[1] end
})
TabVisuals:CreateToggle({
    Name = "Custom Crosshair",
    CurrentValue = config.CustomCrosshairEnabled,
    Flag = "CustomCrosshairEnabled",
    Callback = function(v) config.CustomCrosshairEnabled = v end
})

-- Main loop
RunService.RenderStepped:Connect(function()
    FOVCircle.Visible = config.CustomCrosshairEnabled
    FOVCircle.Color = config.FOVColor
    FOVCircle.Radius = config.FOVRadius
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    if config.CustomCrosshairEnabled then DrawCrosshair() else ClearCrosshair() end

    local target = GetClosestTarget()
    if target then
        local char = target.Character
        if char and char:FindFirstChild(config.AimBone) then
            local part = char[config.AimBone]
            local aimPos = PredictPosition(part, config.PredictionMode)
            local screenPos, onScreen = Camera:WorldToViewportPoint(aimPos)
            local mousePos = Vector2.new(Mouse.X, Mouse.Y)
            local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
            if config.SilentAimEnabled and dist <= config.FOVRadius and math.random(0,100) <= config.HitChance then
                if config.AutoShootEnabled then UniversalShoot() end
            end
            if config.TriggerbotEnabled and dist < 15 then UniversalShoot() end
        end
    end
end)

-- Silent Aim Raycast hook (wallbang, universal)
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if config.SilentAimEnabled and (method == "FindPartOnRay" or method == "Raycast" or method == "FindPartOnRayWithIgnoreList") then
        local target = GetClosestTarget()
        if target and target.Character and target.Character:FindFirstChild(config.AimBone) then
            local part = target.Character[config.AimBone]
            local predicted = PredictPosition(part, config.PredictionMode)
            local origin = args[1].Origin or args[1].p or args[1].Position or args[1]
            local direction = (predicted - origin).Unit * (args[2] and args[2].Magnitude or 500)
            if method == "FindPartOnRay" or method == "FindPartOnRayWithIgnoreList" then
                args[1] = Ray.new(origin, direction)
            elseif method == "Raycast" then
                args[2] = direction
            end
            return oldNamecall(self, unpack(args))
        end
    end
    return oldNamecall(self, ...)
end)
